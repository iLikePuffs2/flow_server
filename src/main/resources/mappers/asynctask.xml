<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
namespace: 命名空间，用于标识每一个Mapper XML文件中的语句，预防在不同的Mapper XML文件中存在相同的语句ID
-->
<mapper namespace="com.zdf.asyncflow.dao.AsyncFlowTaskDao">
    <!--
        resultType: 也称为自动映射，只有在表的列名与POJO类的属性完全一致时使用，会比较方便，全类名
    -->

    <resultMap id="getTaskList" type="com.zdf.asyncflow.data.AsyncFlowTask">
        <result column="id" jdbcType="BIGINT" property="id" />
        <result column="user_id" jdbcType="VARCHAR" property="user_id"/>
        <result column="task_id" jdbcType="BIGINT" property="task_id"/>
        <result column="task_type" jdbcType="VARCHAR" property="task_type"/>
        <result column="task_stage" jdbcType="VARCHAR" property="task_stage"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="crt_retry_num" jdbcType="INTEGER" property="crt_retry_num"/>
        <result column="max_retry_num" jdbcType="INTEGER" property="max_retry_num"/>
        <result column="max_retry_interval" jdbcType="INTEGER" property="max_retry_interval"/>
        <result column="schedule_log" jdbcType="VARCHAR" property="schedule_log"/>
        <result column="task_context" jdbcType="VARCHAR" property="task_context"/>
        <result column="create_time" jdbcType="BIGINT" property="create_time"/>
        <result column="modify_time" jdbcType="BIGINT" property="modify_time"/>
    </resultMap>
    <update id="increaseCrtRetryNum">
        update
            t_lark_task_1
        set
            crt_retry_num = crt_retry_num + 1
        where
            task_id = #{task_id}
    </update>
    <update id="updateTask"
    parameterType="com.zdf.asyncflow.data.AsyncFlowTask">
        update
            t_lark_task_1
        set
            user_id = #{asyncFlowTask.user_id},
            task_stage = #{asyncFlowTask.task_stage},
            status = #{asyncFlowTask.status},
            crt_retry_num = #{asyncFlowTask.crt_retry_num},
            max_retry_num = #{asyncFlowTask.max_retry_num},
            max_retry_interval = #{asyncFlowTask.max_retry_interval},
            schedule_log = #{asyncFlowTask.schedule_log},
            task_context = #{asyncFlowTask.task_context},
            create_time = #{asyncFlowTask.create_time},
            modify_time = #{asyncFlowTask.modify_time}
        where
            task_id = #{asyncFlowTask.task_id}
        and
            status not in
        <foreach collection="statuss" item="s" index="index"
                 open="(" close=")" separator=",">
            #{s}
        </foreach>
    </update>
    <update id="setStatus">
        update
            t_lark_task_1
        set
            status = #{status}
        where
            task_id = #{task_id}
    </update>
    <update id="updateTask_contextByTask_id">
        update
            t_lark_task_1
        set
            task_context = #{task_context}
        where
            task_id = #{task_id}
    </update>
    <update id="modifyTimeoutPending">
        update
            t_lark_task_1
        set
            status = #{status}
        where
            status = 1
        and
            modify_time + #{maxProcessingTime} &lt; #{currentTime};
    </update>

    <select id="getTaskList"
            resultMap="getTaskList">
        SELECT  *
        FROM t_lark_task_1
        where
            task_type = #{taskType} and status = #{status}
        order by modify_time
        limit #{limit}
    </select>
    <select id="getAliveTaskList" resultType="com.zdf.asyncflow.data.AsyncFlowTask">
        select * from t_lark_task_1
        where
            status in
        <foreach collection="statusList" item="status" index="index"
                 open="(" close=")" separator=",">
            #{status}
        </foreach>
    </select>
    <select id="getTaskCountByStatus" resultType="java.lang.Integer"
            parameterType="java.lang.Integer">
        select count(*) from t_lark_task_1
        where
            status = #{status}
    </select>
    <select id="getLongTimeProcessing" resultType="com.zdf.asyncflow.data.AsyncFlowTask">
        select * from t_lark_task_1
        where
            status = #{status}
        and
            modify_time &lt; #{currentTime} - #{maxProcessTime}
    </select>
    <select id="find" resultMap="getTaskList">
        select * from t_lark_task_1
        where
            task_id = #{task_id}
    </select>
    <select id="getTaskCount" resultType="java.lang.Integer">
        select * from t_lark_task_1
        where
            status in
        <foreach collection="statusList" item="status" index="index"
                 open="(" close=")" separator=",">
            #{status}
        </foreach>
    </select>


    <insert id="create"
            parameterType="com.zdf.asyncflow.data.AsyncFlowTask"
            useGeneratedKeys="true" keyProperty="id">
        INSERT INTO `t_lark_task_1`(`user_id`,
                                    `task_id`,
                                    `task_type`,
                                    `task_stage`,
                                    `status`,
                                    `crt_retry_num`,
                                    `max_retry_num`,
                                    `max_retry_interval`,
                                    `schedule_log`,
                                    `task_context`,
                                    `create_time`,
                                    `modify_time`)
        VALUES (#{user_id}, #{task_id}, #{task_type}, #{task_stage},
                #{status}, #{crt_retry_num}, #{max_retry_num}, #{max_retry_interval},
                #{schedule_log}, #{task_context}, #{create_time}, #{modify_time})
    </insert>
    <insert id="save" useGeneratedKeys="true" keyProperty="id">
        <selectKey keyProperty="count" resultType="int" order="BEFORE">
            select count(*) from t_lark_task_1 where id = #{id}
        </selectKey>
        <if test="count > 0">
            update t_lark_task_1
            set
                user_id = #{user_id},
                task_stage = #{task_stage},
                status = #{status},
                crt_retry_num = #{crt_retry_num},
                max_retry_num = #{max_retry_num},
                max_retry_interval = #{max_retry_interval},
                schedule_log = #{schedule_log},
                task_context = #{task_context},
                create_time = #{create_time},
                modify_time = #{modify_time}
            where id = #{id}
        </if>
        <if test="count==0">
            insert into t_lark_task_1
            VALUES (#{user_id}, #{task_id}, #{task_type}, #{task_stage},
            #{status}, #{crt_retry_num}, #{max_retry_num}, #{max_retry_interval},
            #{schedule_log}, #{task_context}, #{create_time}, #{modify_time})
        </if>

    </insert>

</mapper>